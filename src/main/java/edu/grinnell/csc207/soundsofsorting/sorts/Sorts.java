package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import edu.grinnell.csc207.soundsofsorting.sortevents.CompareEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.CopyEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SwapEvent;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {
    /**
     * Swaps indices <code>i</code> and <code>j</code> of array <code>arr</code>.
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i the first index to swap
     * @param j the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> bubbleSort (T[] arr) {
        List<SortEvent<T>> l = new ArrayList<>();
        for (int j = 0; j < arr.length; j++) {
            for (int i = 0; i < arr.length - (1 + j); i++) {
                // add compare event
                l.add(new CompareEvent<>(i, i+1));
                if (arr[i].compareTo(arr[i + 1]) > 0) {
                    swap(arr, i, i + 1);
                    // add swap event
                    l.add(new SwapEvent<>(i, i+1));
                }
            }
        }
        return l;
    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> selectionSort(T[] arr) {
        List<SortEvent<T>> l = new ArrayList<>();
        for (int j = 0; j < arr.length; j++) {
            int min = j;
            for (int i = j; i < arr.length; i++) {
                l.add(new CompareEvent<>(i, min));
                if (arr[i].compareTo(arr[min]) < 0) {
                    min = i;
                }
            }
            l.add(new SwapEvent<>(j, min));
            swap(arr, j, min);
        }
        return l;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * <pre>
     * [ i elements in order | unprocessed ] 
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> insertionSort(T[] arr) {
        List<SortEvent<T>> l = new ArrayList<>();
        for (int i=1; i<arr.length; i++){
            for (int j=0; j<i; j++){
                l.add(new CompareEvent<>(i, j));
                if(arr[i].compareTo(arr[j]) < 0){
                    for (int k=i; k>j; k--){
                        l.add(new SwapEvent<>(k, k-1));
                        swap(arr, k, k-1);
                    }
                    break;
                }
            }
        }
        return l;
    }

    /**
     * Sorts the array according to the merge sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> mergeSort(T[] arr) {
        List<SortEvent<T>> l = new ArrayList<>();
        if (arr.length <= 1 ) return l; // base case
        int mid = arr.length / 2;
        T[] left = Arrays.copyOfRange(arr, 0, mid);
        T[] right = Arrays.copyOfRange(arr, mid, arr.length);
        
        l.addAll(mergeSort(left));
        l.addAll(mergeSort(right));
        merge(left, right, arr, l);
        return l;
    }

     /**
     * 
     * @param left a list of type T representing the left half of arr
     * @param right a list of type T representing the right half of arr
     * @param arr a list that holds all elements in left and right 
     */
    public static <T extends Comparable<? super T>> void merge
    (T[] left, T[] right, T[] arr, List<SortEvent<T>> lst){
        int i=0, l=0, r=0;
        while(i < arr.length){
            if (l >= left.length){
                lst.add(new CopyEvent<>(right[r], i));
                arr[i] = right[r];
                r++; 
                i++;
            } else if (r >= right.length){
                lst.add(new CopyEvent<>(left[l], i));
                arr[i] = left[l];
                l++;
                i++;
            } else {
                lst.add(new CompareEvent<>(l, r));
                if (left[l].compareTo(right[r]) < 0){
                    lst.add(new CopyEvent<>(left[l], i));
                    arr[i] = left[l];
                    i++;
                    l++;
                } else {
                    lst.add(new CopyEvent<>(right[r], i));
                    arr[i] = right[r];
                    r++;
                    i++;
                }
            }
        }
    }

    /**
     * Sorts the array according to the quick sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> quickSort(T[] arr) {
        List<SortEvent<T>> l = new ArrayList<>();
         if (arr.length <= 1) return l;
        quickSortH(arr, 0, arr.length-1, l);
        return l;
    }

    /**
     * @param arr an array of type T to sort
     * @param start beginning of sorting section
     * @param end end of sorting section
     */
    public static <T extends Comparable<? super T>> void quickSortH(T[] arr, int start, int end, List<SortEvent<T>> l) {
        if (start >= end) return;
        int i = start;
        int j = start;
        T pivot = arr[end];
        while (j < end){
            l.add(new CompareEvent<>(j, end));
            if (arr[j].compareTo(pivot) < 0){
                l.add(new SwapEvent<>(i, j));
                swap(arr, i, j);
                i++;
            }
            j++;
        }
        l.add(new SwapEvent<>(i, end));
        swap(arr, i, end);
        
        quickSortH(arr, start, i-1, l);
        quickSortH(arr, i+1, end, l);
    }

    /**
     * sorts the array with heap sort algorithim
     * @param array of type T to be sorted
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> heapSort (T[] arr) {
        List<SortEvent<T>> l = new ArrayList<>();
        int n = arr.length;
        // build max heap
        for (int i = n-1; i >= 0; i--){
            heapify(arr, i, n, l);
        }
        // heap sort
        while (n > 0) {
            // swap
            l.add(new SwapEvent<>(0, n-1));
            swap(arr, 0, n-1);
            // reduce size
            n--;
            heapify(arr, 0, n, l);
        }
        return l;
    }

    /**
     * function to heapify a tree
     * @param arr array to heapify
     * @param root value of heap to start heapify at
     * @param n size of heap
     */
    public static <T extends Comparable<? super T>> void heapify (T[] arr, int root, int n, List<SortEvent<T>> l){
        int left = root*2 + 1;
        int right = root*2 + 2;
        int max = root;

        // is root less than left child
        l.add(new CompareEvent<>(root, left));
        if (left < n && arr[root].compareTo(arr[left]) < 0){
            max = left;
        }

        // is right the largest
        l.add(new CompareEvent<>(right, max));
        if (right < n && arr[right].compareTo(arr[max]) > 0){
            max = right;
        }

        // swap and recurse
       l.add(new CompareEvent<>(max, root));
       if (arr[max].compareTo(arr[root]) != 0){
            l.add(new SwapEvent<>(max, root));
            swap(arr, root, max);
            heapify(arr, max, n, l);
       }
    }

    /**
     * Apply each event to the array
     * @param l an array to sort
     * @param events list of events
     */
    public static <T> void eventSort(T[] l, List<SortEvent<T>> events){
        for (SortEvent<T> event : events){
            event.apply(l);
        }
    }
}
